{
  "name": "Main Workflow",
  "nodes": [
    {
      "parameters": {
        "options": {
          "allowFileUploads": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -900,
        1920
      ],
      "id": "984def97-8b6d-4798-8b02-ad560ad95883",
      "name": "When chat message received",
      "webhookId": "63228c03-f204-456a-bf6d-00122699eb81"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        740,
        -40
      ],
      "id": "a236986a-b011-486b-a9fa-6e70185066ea",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "From the user prompt, draft a detailed research plan based on the following features/ capabilities then ask the user to confirm if they agree to proceed. ",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -240,
        1880
      ],
      "id": "083e7e04-70ac-4930-99f4-f02e417dd2c9",
      "name": "Chat Classifier"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -300,
        2020
      ],
      "id": "072fc8dc-0820-4076-8604-031378c8761f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "chn1Vyq14nakpxXd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -200,
        2020
      ],
      "id": "8154c242-c505-4604-82f7-9eeacf06bf28",
      "name": "Simple Memory"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -80,
        2060
      ],
      "id": "3551d285-beaa-4931-b174-e44cde01921e",
      "name": "Think"
    },
    {
      "parameters": {
        "inputText": "={{ $json.chatInput }}",
        "categories": {
          "categories": [
            {
              "category": "Proceed",
              "description": "If the user agree with the research plan, proceed with the execution."
            },
            {
              "category": "Stop and rebuild",
              "description": "If the user doesn't specify they want to proceed with the research execution, use this route"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -640,
        1860
      ],
      "id": "e27a5c5a-c4e2-435c-8b61-17501dc2a2ab",
      "name": "Text Classifier1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -640,
        1980
      ],
      "id": "4db23993-9016-43d8-9a00-0ae4230d88b7",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "chn1Vyq14nakpxXd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $json.chatInput }}",
        "categories": {
          "categories": [
            {
              "category": "Market Research",
              "description": "Scan public web, news, analyst reports and corporate sites to size markets and benchmark competitors via Perplexity + Firecrawl."
            },
            {
              "category": "Financial Data",
              "description": "Pull structured statements, ratios, guidance, and valuation comps from Octagon or similar financial data APIs."
            },
            {
              "category": "Confidential Upload Processing",
              "description": "Parse client‑supplied PDFs/CSVs, redact PII, map to templates, and summarize insights before any external call."
            },
            {
              "category": "Regulatory & Policy Watch",
              "description": "Track statutes, proposed rules, and enforcement actions affecting the client’s sector across jurisdictions."
            },
            {
              "category": "Operational Benchmarking",
              "description": "Pull industry productivity ratios, cost curves, and best‑practice process metrics for performance gaps."
            },
            {
              "category": "Talent & Organization Insights",
              "description": "Mine labor‑market data, LinkedIn trends, and org‑design benchmarks for workforce planning."
            }
          ]
        },
        "options": {
          "multiClass": true,
          "fallback": "other"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -500,
        -1180
      ],
      "id": "1ac85529-a56a-4832-bb7a-e35206a495c0",
      "name": "Text Classifier2",
      "disabled": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "8fedeb7e-43da-4848-82e9-9b9fe0e87d56",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "document"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1520,
        0
      ],
      "id": "f0e97055-0a5b-4e3a-b986-2730d3e7a494",
      "name": "Webhook",
      "webhookId": "8fedeb7e-43da-4848-82e9-9b9fe0e87d56"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Output from specialized agents:\n1. Financial Analysis:\n2. Market Intelligence:{{ $json.output }}\n3. Document Analysis:\n\nWrite a comprehensive and clean report based on the input data. Structure your output properly and format properly with bold, italic, subheading and all kinds of syntax possible.\n\n\n",
        "options": {
          "systemMessage": "You are the Aggregation & Reporting Agent in a multi-agent workflow.  \nYour mission is to:\n1. Verify that all specialized-agent outputs collectively satisfy the user’s request.  \n2. Resolve inconsistencies, highlight gaps, and rate confidence in each finding.  \n3. Deliver a concise, executive-ready report that integrates every relevant detail in a clear, professional style.\n\nYou will receive:\n• <USER_PROMPT> ‒ the original user request.  \n• <FINANCIAL_DATA_OUT> ‒ output from the Financial-Data Agent.  \n• <MARKET_INTEL_OUT> ‒ output from the Market-Intelligence Agent.  \n• <DOC_ANALYSIS_OUT> ‒ output from the Document-Analysis Agent.  \n• (Optional) <OTHER_AGENT_OUT_n> ‒ any additional agent results.\n\n**Rules**\n\n1. Base every statement solely on the provided inputs; do not hallucinate new facts.  \n2. Preserve all material insights and numeric values from the specialized agents.  \n3. Flag any • conflict, • duplication, or • missing element relative to <USER_PROMPT>.  \n4. Use crisp, consulting-style English (active voice, no fluff, define acronyms once).  \n5. Think step-by-step off-screen; return **only** the final report in the template below.\n\n**Workflow**\n\nA. Parse <USER_PROMPT> → extract explicit objectives, metrics, time frames, deliverables.  \nB. For each specialized output:  \n   – Summarize key points in ≤ 40 words.  \n   – Score relevance & quality 1-5 (5 = fully meets requirement).  \nC. Cross-check outputs against user objectives; build a “Coverage Matrix”.  \nD. Note gaps, contradictions, or low-confidence areas; draft follow-up questions if critical.  \nE. Synthesize an integrated narrative; ensure seamless flow and logical ordering.  \nF. Populate the Report Template."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        960,
        -40
      ],
      "id": "f8b60894-3498-4b07-b996-0a5e6729cbd6",
      "name": "Reviewing Agent",
      "executeOnce": false
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1180,
        100
      ],
      "id": "c6485922-aadb-49bc-a9a0-d1659fa04e31",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "chn1Vyq14nakpxXd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -960,
        100
      ],
      "id": "2a1cf355-462b-4023-a661-adc153ab8cf0",
      "name": "Think3"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.agent }}",
                    "rightValue": "FinancialDataAgent",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "384a2e57-21b6-4c31-b8ea-1cf728ddae8c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "FinancialDataAgent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d0537cc9-372b-440d-8b8b-19b7fcf33280",
                    "leftValue": "={{ $json.agent }}",
                    "rightValue": "MarketIntelAgent",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "MarketIntelAgent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9909fe94-edb2-4606-8eb6-f6fe77b95e91",
                    "leftValue": "={{ $json.agent }}",
                    "rightValue": "DocAnalysisAgent",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DocAnalysisAgent"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -600,
        -60
      ],
      "id": "de8e33bc-0638-4a3b-8806-ccd744a164a3",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// ❶ Parse the JSON string\nconst tasks = JSON.parse($input.first().json.output).tasks;\nreturn tasks.map(t => ({ json: t }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -820,
        -60
      ],
      "id": "3ba2b796-4cd1-4355-b0d2-6ca7ee54c9ac",
      "name": "Emit one item per task"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -20,
        100
      ],
      "id": "438c02f4-aa9b-49d2-aa85-78b642e85b80",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "chn1Vyq14nakpxXd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        220,
        120
      ],
      "id": "ac0f36b5-5291-42d3-9150-e6434adfa296",
      "name": "Think4"
    },
    {
      "parameters": {
        "sseEndpoint": "https://kmle.app.n8n.cloud/mcp/cf10840b-f746-4a56-81a6-e8d8cd8216cf/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        320,
        120
      ],
      "id": "ece8d42d-7eab-49fe-9c91-53ae9ada921c",
      "name": "Market Intel Tools1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -820,
        460
      ],
      "id": "f685ef26-e788-47a2-8a98-93a8c1d9c3ff",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer Os7EuJ03JrIEz2UTS9DFCa70XpKa2iK9"
            },
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "document0"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -840,
        280
      ],
      "id": "81052f3f-2c31-4cfb-a208-744a14b45660",
      "name": "Upload to Mistral1"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -620,
        280
      ],
      "id": "a227c8c8-797b-4ddd-80ce-5f059dd14035",
      "name": "get url from mistral1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "yPwz4YNXn7bXbuXY",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -420,
        280
      ],
      "id": "4b7a7a13-6e40-4ae5-a9e3-4df134930c51",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "yPwz4YNXn7bXbuXY",
          "name": "OpenRouter"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f5a6b744-d289-42dd-b05c-2ba9ecbb5cdc",
              "leftValue": "={{ $json.headers['content-type'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1060,
        300
      ],
      "id": "f9d33c05-dd07-40db-8cd3-55f02123ac8c",
      "name": "If doc upload exist"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Answer the following user prompt. Use think tool to break down the request and plan effectively for your analysis. \n\nHere is your task object:\ntaskID: {{ $json.id }}\nobjective: {{ $json.objective }}\nInputs: {{ $json.inputs }}\nPriority: {{ $json.priority }}\n\n\nList out key arguments with detailed supporting data. \n\nhere is the extracted text from the document:\n{{ $json.pages }}\n",
        "options": {
          "systemMessage": "You are DocAnalysisAgent — skilled at extracting key points from PDFs,\nearnings‑call transcripts, and other long documents."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        20,
        280
      ],
      "id": "46b6f9a7-a2c8-4e3e-aae8-fe50d61ad7ba",
      "name": "AI Agent3"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        160,
        500
      ],
      "id": "93a7eb92-f776-410d-90a3-e542c8753ce7",
      "name": "Think5"
    },
    {
      "parameters": {
        "sseEndpoint": "https://kkkle.app.n8n.cloud/mcp/cf10840b-f746-4a56-81a6-e8d8cd8216cf/sse"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        280,
        500
      ],
      "id": "d3fb75c9-1295-4d55-9829-f570ac25ceb3",
      "name": "Market Intel Tools2"
    },
    {
      "parameters": {
        "model": "qwen3:8b-q4_K_M",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        0,
        460
      ],
      "id": "3bf9f7d2-c7e7-481a-8de1-ec59866c89e0",
      "name": "Ollama Chat Model1",
      "credentials": {
        "ollamaApi": {
          "id": "xHuYe0MDGOs9IpBW",
          "name": "Local Ollama service"
        }
      }
    },
    {
      "parameters": {
        "content": "## Document OCR",
        "height": 360,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1120,
        240
      ],
      "id": "06e2dcd4-6900-4945-b1b0-8584d17c28e5",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -20,
        -180
      ],
      "id": "0089c266-d29a-423f-b45a-92c168c82932",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "chn1Vyq14nakpxXd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        160,
        -180
      ],
      "id": "a234ef76-2a28-4062-a759-8b4f39dd3119",
      "name": "Think6"
    },
    {
      "parameters": {
        "sseEndpoint": "https://kmle.app.n8n.cloud/mcp/publicfinancial/sse",
        "include": "selected"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        280,
        -180
      ],
      "id": "dc128c42-52a9-465e-aa0e-fc31ec444d36",
      "name": "Octagon Tools"
    },
    {
      "parameters": {
        "content": "## Itemized research\n",
        "height": 1020,
        "width": 640,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        -380
      ],
      "id": "818a0432-28fb-40ca-8d95-15f1d0d79c16",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Use the Market Intel tool to support your analysis. Return your answer in json format so the reviewing agent will have full details of the research.\nHere is your task object:\n{{ $json.id }}\n{{ $json.objective }}\n{{ $json.inputs }}\n{{ $json.priority }}",
        "options": {
          "systemMessage": "You are MarketIntelAgent — an expert news‑monitor that scans premium wires,\nregulatory sites, and analyst blogs. Use the tool if necessary."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        0,
        -40
      ],
      "id": "c424efbf-ad8e-482e-9167-6ac402d5c5b8",
      "name": "MarketIntelAgent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Use the Octagon tools to support your analysis.\nHere is your task object:\ntaskID: {{ $json.id }}\nobjective: {{ $json.objective }}\nInputs: {{ $json.inputs }}\nPriority: {{ $json.priority }}",
        "options": {
          "systemMessage": "You are FinancialDataAgent — a finance‑focused LLM with reliable access to\n • SEC‑filed financial statements,\n • reputable market‑data APIs,\n • basic spreadsheet math.\n\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        0,
        -320
      ],
      "id": "7dd9dda2-f89f-4ae9-9098-198a06392d0d",
      "name": "FinancialDataAgent"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1480,
        -40
      ],
      "id": "2df3bab0-2567-4480-b1b0-4b17fd0d6f60",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3-mini",
          "mode": "list",
          "cachedResultName": "o3-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        920,
        240
      ],
      "id": "66bd860c-c4ee-45f0-bf44-d064b162467f",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "chn1Vyq14nakpxXd",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=\nTHINK\n 1. Read user message: {{ $json.body.message }}; list every discrete requirement or output the user expects.  \n 2. Cluster requirements into MECE buckets (finance, market, document, etc.).  \n 3. For each bucket, decide the best‑fit agent (or note “no agent needed”).  \n 4. Draft task objects following the schema, set IDs (T1, T2 …) and dependencies.  \n 5. Double‑check: all user requirements covered once, none twice.\nEND THINK\n\nRules\n1. Use **only** the three allowed agent names in the `agent` field.  \n2. Omit an agent entirely if the user prompt requires nothing from it.  \n3. Each user requirement appears in exactly one task (MECE).  \n4. If a task needs no prior results, keep `depends_on` empty.  \n5. Internally THINK through steps; expose **only** the final JSON.\n\nOutput format  \nReturn **only** the JSON object that matches the schema below.  \nNo markdown, no prose, no extra keys.\n\nSchema  (all fields required)\n{\n  \"tasks\": [\n    {\n      \"id\": \"T1\",                        // string, unique\n      \"sessionId\": \"{{ $json.body.session_id }}\",\n      \"agent\": \"FinancialDataAgent\",    // enum: FinancialDataAgent | MarketIntelAgent | DocAnalysisAgent\n      \"objective\": \"One‑line, action‑oriented goal\",\n      \"inputs\": \"Relevant excerpt(s) from <USER_PROMPT>\",\n      \"priority\": 1,                    // integer ≥1   (1 = highest)\n      \"depends_on\": []                 // array of task IDs or empty\n    }\n    // ... additional task objects\n  ]\n}",
        "options": {
          "systemMessage": "You are the Orchestrator in a multi‑agent framework.  \nYour job is to de‑compose each user request into **M.E.C.E.** (Mutually Exclusive, Collectively Exhaustive) tasks and assign only the relevant ones to the available specialized agents:\n\n• FinancialDataAgent  \n• MarketIntelAgent  \n• DocAnalysisAgent  \n\nYour output **must** be a single well‑formed JSON object exactly matching the schema below.  \nYou may think step‑by‑step internally using the THINK tool, but expose **only** the final JSON."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -1180,
        -60
      ],
      "id": "90571bc0-f61d-4a54-8bbd-80df8b84d2ce",
      "name": "Orchestrator Agent"
    },
    {
      "parameters": {
        "content": "## Orchestrator",
        "height": 360,
        "width": 920,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1280,
        -140
      ],
      "id": "4fa6e2f4-da28-455a-a893-e6a02c9f27ef",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.session_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1060,
        100
      ],
      "id": "7b34bf97-7593-4aaf-8dec-d08ed85801b9",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "resource": "pdf",
        "pdfTemplateId": "82d77b2392e2a454"
      },
      "type": "n8n-nodes-base.apiTemplateIoTool",
      "typeVersion": 1,
      "position": [
        1120,
        360
      ],
      "id": "3cb6a50f-d980-4a8c-be1e-38b7c2ce9792",
      "name": "APITemplate.io",
      "credentials": {
        "apiTemplateIoApi": {
          "id": "wLKa4l3hVktp3Exn",
          "name": "APITemplate.io account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "content": "## REviewing",
        "height": 680,
        "width": 840,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        580,
        -120
      ],
      "id": "acaf6db9-709d-43dd-992a-62317f131359",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Text Classifier1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Chat Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Chat Classifier",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Chat Classifier",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier1": {
      "main": [
        [],
        [
          {
            "node": "Chat Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "If doc upload exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Reviewing Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think3": {
      "ai_tool": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Emit one item per task": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "FinancialDataAgent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MarketIntelAgent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "MarketIntelAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think4": {
      "ai_tool": [
        [
          {
            "node": "MarketIntelAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Market Intel Tools1": {
      "ai_tool": [
        [
          {
            "node": "MarketIntelAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Mistral1": {
      "main": [
        [
          {
            "node": "get url from mistral1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get url from mistral1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        []
      ]
    },
    "If doc upload exist": {
      "main": [
        [
          {
            "node": "Upload to Mistral1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Market Intel Tools2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "FinancialDataAgent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think6": {
      "ai_tool": [
        [
          {
            "node": "FinancialDataAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Octagon Tools": {
      "ai_tool": [
        [
          {
            "node": "FinancialDataAgent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MarketIntelAgent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "FinancialDataAgent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Reviewing Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Reviewing Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Orchestrator Agent": {
      "main": [
        [
          {
            "node": "Emit one item per task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "Orchestrator Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "APITemplate.io": {
      "ai_tool": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f8865609-5a9c-4cd4-ae10-4174178a3924",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "cvoLE2TJUzuu1L3N",
  "tags": [
    {
      "createdAt": "2025-04-21T21:27:58.869Z",
      "updatedAt": "2025-04-21T21:27:58.869Z",
      "id": "dfS6qeX82lpCttp6",
      "name": "ProspectsAI"
    }
  ]
}